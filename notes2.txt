////////////////////////////////////////////////////////////////
 __  __                     _          __  __
|  \/  |                   | |        |  \/  |
| \  / | __ _ _ __  _   _  | |_ ___   | \  / | __ _ _ __  _   _
| |\/| |/ _` | '_ \| | | | | __/ _ \  | |\/| |/ _` | '_ \| | | |
| |  | | (_| | | | | |_| | | || (_) | | |  | | (_| | | | | |_| |
|_|  |_|\__,_|_| |_|\__, |  \__\___/  |_|  |_|\__,_|_| |_|\__, |
                    __/ |                                 __/ |
                   |___/                                 |___/
                          Part 2 Many to Many Notes by >>> bern
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

                    /////////// Key \\\\\\\\\
                          ‚ûï Edit File
                          üéÆ console command
                    /////////////\\\\\\\\\\\\\

Implement votes -> need to register if it is a vote up or down -> Use boolean

üéÆ rails g model vote user:references question:references is_up:boolean
üéÆ rails db:migrate
do we need an index on the migration ?
    # this type of index is a composite index, where we're indexing in more than one field
    # its a good idea to put such index of our queries incluidng both user_id and question_id in them
    # add_index :votes, [:user_id, :question_id]
    if you fetch votes from a voter -> use normal index
    if query select from user_id and question_id-> use composite index

‚ûï vote.rb model ->> add validations
    validates :question_id, uniqueness: { scope: :user_id }

‚ûï question.rb model ->>
    has_many :votes, dependent: :destroy
    has_many :voters, through: :votes, source: :user

‚ûï user.rb model ->>
    has_many :votes, dependent: :destroy
    has_many :voted_questions, through: :votes, source: :question

üéÆ rails g controller votes
edit routes
  resources :votes, only: [:create, :update, :destroy]
  we do shallow because we pass user with user_id, not through the url

‚ûï edit votes controller
  add methods create, update, destroy

‚ûï edit question.rb
  def voted_by?(user)
    votes.exists?(user: user)
  end
  def vote_for(user)
    # votes.find_by_user_id user.id ->always gives you one
    # where gives you a collection
    votes.find_by(user: user)
  end

‚ûï edit question.rb model
    remove voted_by? method since we aren't using it


üìù never define variables in model
‚ûï move them to controller show
    @vote = @question.vote_for(current_user)


‚ûï edit show
  <% if @vote.nil? %>
  <%= link_to 'Vote Up', question_votes_path(@question, {is_up: true}), method: :post %>
  <%# button_to 'Vote Up', question_votes_path(@question, {is_up: true})%>
  <%= link_to 'Vote Down', question_votes_path(@question, {is_up: false}), method: :post %>
  <% elsif @vote.is_up? %>
    <%= link_to 'Un-do Vote Up', vote_path(@vote), method: :delete %>
    <%= link_to 'Vote Down', vote_path(@vote, {is_up: false}), method: :patch %>
  <% else %>
    <%= link_to 'Vote Up', vote_path(@vote, {is_up: true}), method: :patch %>
    <%= link_to 'Un-do Vote Down', vote_path(@vote), method: :delete %>
  <% end %>

‚ûï Helper method to avoid creating two instance variables
  # def current_vote
  #   @current_vote ||= @question.vote_for(current_user)
  # end
  # helper_method :current_vote

‚ûïability.rb
  can :vote, Question do |q|
    user != q.user
  end
  cannot :vote, Question do |q|
    user == q.user
  end

‚ûï votes controller

‚ûï check in terminal that user cannot update-> how?
  v = Vote.find 14
  change user id
  v.user_id = 1
  v.save
  in website try to un-like -> now it isn't allowed

‚ûï show
  (<%= @question.votes_total %>)

‚ûï question.rb
  def votes_total
    votes.where(is_up: true).count - votes.where(is_up: false).count
  end

üìù count -> db gives you back count -> a number
üìù length -> db gives you back an array of results
  when you can delegate something to database always do it,
  its faster than javascript and Rails
  always delegate to db its better

‚ûï vote.rb
  def self.up
    where(is_up: true)
  end
  def self.down
    where(is_up: false)
  end

‚ûï question.rb
  def votes_total
     votes.up.count - votes.down.count
  end

/////////////TAGGING QUESTIONS\\\\\\\\\\\\

to add foreign key tags must exist
rails g model tag name
rails g model tagging question:references tag:references
rails db:migrate

üéÆ ->> in console
  q = Question.find 16
  q.voters
  q.voter_ids
  q.voter_ids = [1,2,3] -> appends users as voters to q

‚ûï seeds
‚ûï tag.rb
  has_many :taggings, dependent: :destroy
  has_many :questions, through: :taggings

  validates :name, presence: true, uniqueness: true
‚ûïquestion.rb
  has_many :taggings, dependent: :destroy
  has_many :tags, through: :taggings

üéÆ ->> in console
  Tag.all
  q = Question.last
  q.tags
  q.tag_ids
  q.tag_ids = [4,6,7]
  q.tag_ids = [4,9,10]
    -> 2 deletes, one insertion

‚ûï_form.html.erb ->collection check boxes
  http://apidock.com/rails/v4.0.2/ActionView/Helpers/FormOptionsHelper/collection_check_boxes
  http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html
  <div>
  <%= f.label :tag_ids %>
  <%= f.collection_check_boxes :tag_ids, Tag.all, :id, :name %>
  </div>

‚ûï to customize html
  <%= link_to 'hello', 'http://google.com' %>
  <%= link_to 'http://google.com' do %>
   <span>hello</span>
  <% end %>

‚ûïQuestionsController
  def question_params
    # { tag_ids: [] } will tell Rails to accept and array of value for `tag_ids`
    # instead of a single value
    params.require(:question).permit([:title, :body, {tag_ids: []}])
  end
